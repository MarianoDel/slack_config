* PARA INSTALAR PYTHON EN SLACKWARE

  busco paquete en www.slackbuilds.org
  buscar paquete setuptools o pysetuptools e instalar
  buscar paquete pip e instalar

** PARA INSTALAR PAQUETES DESDE SLACKBUILDS.ORG
*** Recordatorio
   slackbuilds.org	    //buscar el paquete con la version del slackware correspondiente 14.1 (en este ejemplo)
   
   bajar el slackbuid y el soft original	//generalmente queda en Downloads (spyder por ejemplo)
   
   gunzip spyder.tar.gz
   tar -xvf spyder.tar
   
   cd spyder	//ir al directorio principal creado y hacer ejecutable el slackbuid
   
   chmod +x spyder.SlackBuild
   
   cp spyder-2.3.8.zip ./spyder	//copiar el soft al directorio principal del build
   
   ./spyder.SlackBuild 		//ejecutar el slackbuild
   
   generalmente el paquete quede en /tmp
   
   cd /tmp
   
   installpkg spyder-2.3.8

*** Revisar documentos en archivos slack_soft_*.org

** USANDO PIP
   //pip busca informacion de paquetes para python asi:
   pip search "numpy"

   //pip muestra informacion de lo instalado
   pip show numpy

   //pip instala asi:
   pip install numpy

   pip install --upgrade numpy	//hace un upgrade del soft

   //pip borra o desinstala paquetes asi:
   pip uninstall numpy

** PARA ARMAR LA BIBLIOTECA CIENTIFICA DE SCIPY
   slackbuilds setuptools
   slackbuilds pip
   slackbuilds blas
   slackbuilds lapack
   pip install numpy
   pip install scipy
   pip install matplotlib
   pip install ipython
   pip install pandas
   pip install sympy

** PARA CAMBIAR EL PYTHON QUE SE ESTA UTILIZANDO
   #voy a dejar la posibilidad de utilizar python 2.7 actualmente instalado
   instalo el nuevo python 3.6 (de nuevo para slack 14.2)

   ##PARA MOVERME ENTRE VERSIONES
   cd /usr/bin
   ls python*		#me muestra la lista de python instalados en la maquina

   ls -l python	#me muestra como esta actualmente el hardlink
   lrwxrwxrwx 1 root root 7  5 sept. 07:04 python -> python3

   ln -sf python2.7 python		#creo el nuevo hardlink
   ls -l python
   lwxrwxrwx 1 root root 7 Dec 11 19:28 python -> python2

* PARA UTILIZAR SCRIPTS PYTHON EN SLACKWARE

#puedo correr scripts desde la consola con python y el nombre del script
pyhton test.py

#si corro el script dentro del interprete las variables quedan cargadas y las puede revisar despues
#puedo correr el script dentro del interprete python con la funcion execfile
python
>>> execfile ('test.py')
>>> var_value
>>> quit()

#Si lo quiero correr dentro del interprete y pasarle argumentos
#En el script incluir sys para poder recuperar los argumentos
import sys

if len(sys.argv) != 2:
    	print 'usage : and one more arg'
    	sys.exit(1)

#en el interprete
>>> import sys
>>> sys.argv = ['arg1', 'arg2']
>>> execfile('test.py')

* USOS de PIP (pip3)
** Buscar programa o libreria en PyPi
   # pip3 search pyside2

** Upgrade de PiP
   # pip3 install --upgrade pip
* PYTHON Virtual Enviroments
  A Virtual Environment is a tool to keep the dependencies required by different projects
  in separate places, by creating virtual Python environments for them. It solves the
  “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global
  site-packages directory clean and manageable.

  For example, you can work on a project which requires Django 1.10 while also maintaining
  a project which requires Django 1.8.

** Install virtualenv via pip:
   pip install virtualenv

** Test your installation
   virtualenv --version

** Create a virtual environment for a project:
   cd my_project_folder
   virtualenv my_project

** To begin using the virtual environment, it needs to be activated:
   source my_project/bin/activate
   #o el que utilizo
   . my_project/bin/activate

** Install packages as usual, for example:
   pip install requests

** If you are done working in the virtual environment for the moment, you can deactivate it:
   deactivate

** To delete a virtual environment, just delete its folder. (In this case, it would be rm -rf my_project.)
   rm -rf my_project

* PYTHON on Console
** Python program that uses print, end
   # Change end argument to avoid newline.
   print("Hi, ", end="")
   print("how are you?")

   # Output
   $ Hi, how are you?

** Python program that uses format, print
   # Print formatted string.
   value = 10
   print(str.format("There are {} apples", value))

   # Output
   $ There are 10 apples

** Python program that uses input

   # Get input from console.
   s = input()
   print("You typed", s)
   
   # Use if-statement on input.
   if s == "a":
   print("Letter a detected")
   else:
   print("Not letter a")
   
   # Output
   $ a
   $ You typed a
   $ Letter a detected

** Python program that interacts with user
   # Continue while true.
   while True:
   # Get input.
   value = input()

   # Break if user types q.
   if value == "q":
   break

   # Display value.
   print("You typed: ", value)

   # Exit message.
   print("You quit.")

   # Output
   $ 1
   $ You typed:  1
   $ 2
   $ You typed:  2
   $ 3
   $ You typed:  3
   $ q
   $ You quit.

** Python program that converts console input
   print("Enter number:")
   # Get input and convert it to an integer.
   value = input()
   number1 = int(value)

   print("Again:")
   value = input()
   number2 = int(value)

   print("Product:")
   # Multiply the two numbers.
   print(number1 * number2)

   # Output
   $ Enter number:
   $ 10
   $ Again:
   $ 2
   $ Product:
   $ 20

** Python program that uses print, file argument
   # Open this file for writing.
   f = open("C:\\profiles\\perls.txt", "w")

   # Print lines to the file.
   print("Some text", file=f)
   print("Some more text", file=f)

   # File contents: perls.txt
   # Some text
   # Some more text

** Working with Directories
*** Get current Directory
    import os
    currentDirectory = os.getcwd()

*** Change current Directory
    import os
    os.chdir('/home/varun')

*** Get current Filename
    - This won't work if you've already used os.chdir() to change 
      your current working directory, since the value of the __file__ 
      constant is relative to the current working directory and is not 
      changed by an os.chdir() call.

    import os 
    dir_path = os.path.dirname(os.path.realpath(__file__))

*** Current relative, etc
    import os
 
    dirpath = os.getcwd()
    print("current directory is : " + dirpath)
    foldername = os.path.basename(dirpath)
    print("Directory name is : " + foldername)
    scriptpath = os.path.realpath(__file__)
    print("Script path is : " + scriptpath)

** Working with Files
*** Para abrir o crear archivos
    import os

    f = os.open(nombre)
    f = os.open(nombre, flags=...)

    f.close()

*** Flags tipicos
    The following constants are options for the flags.
    They can be combined using the bitwise OR operator |.
    Some of them are not available on all platforms.

    os.O_RDONLY − open for reading only
    os.O_WRONLY − open for writing only
    os.O_RDWR − open for reading and writing
    os.O_NONBLOCK − do not block on open
    os.O_APPEND − append on each write
    os.O_CREAT − create file if it does not exist
    os.O_TRUNC − truncate size to 0
    os.O_EXCL − error if create and file exists
    os.O_SHLOCK − atomically obtain a shared lock
    os.O_EXLOCK − atomically obtain an exclusive lock
    os.O_DIRECT − eliminate or reduce cache effects
    os.O_FSYNC − synchronous writes
    os.O_NOFOLLOW − do not follow symlinks

*** Binary Files
    with open("myfile", "rb") as f:
    byte = f.read(1)
    while byte != b"":
        # Do stuff with byte.
        byte = f.read(1)

*** Flags for binary
    open() Parameters
    file - path-like object (representing a file system path) giving the pathname
    mode (optional) - mode while opening a file. If not provided, it defaults to 'r' (open for reading in text mode). Available file modes are:
    Mode	Description
    'r'	    Open a file for reading. (default)
    'w'	    Open a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
    'x'	    Open a file for exclusive creation. If the file already exists, the operation fails.
    'a'	    Open for appending at the end of the file without truncating it. Creates a new file if it does not exist.
    't'	    Open in text mode. (default)
    'b'	    Open in binary mode.
    '+'	    Open a file for updating (reading and writing)
    
* Scientific Python

** Numpy
*** Arrays ndarray
    import numpy as np

    a = np.array([0, 0.5, 1.0, 1.5, 2.0])
    type(a)
    >>> numpy.ndarray

**** Operaciones en ndarray
     a.sum()    ;;suma todos los elementos del array
     
     a.std()    ;;desviacion estandar de los elementos del array

     a.cumsum()    ;;running cumsum, suma elementos anteriores y los pone en los nuevos

**** Operaciones vectorizadas en el ndarray
     Cuando se realiza una operaion al array, la opracion se aplica a todos los elementos
     a * 2    ;;multiplica todos los elementos de a por 2

     a ** 2    ;;todos los elementos de a al cuadrado

**** Crear matrices con los ndarray
     In [103]: b = np.array([a, a * 2])
     b
     Out[103]: array([[ 0. , 0.5, 1. , 1.5, 2. ],
     [ 0. , 1. , 2. , 3. , 4. ]])
     In [104]: b[0] # first row
     Out[104]: array([ 0. , 0.5, 1. , 1.5, 2. ])
     In [105]: b[0, 2] # third element of first row
     Out[105]: 1.0
     In [106]: b.sum()
     Out[106]: 15.0

**** Inicializar "instanciar" ndarray
     np.array([1, 2, 3])    ;;debo indicar todos los elementos

     - en los que siguen puedo especificar dtype y order
     np.zeros([shape], [dtype = ], [order = ])

     np.ones()

     np.ones_like()

     dtype Description Example
     t Bit field t4 (4 bits)
     b Boolean b (true or false)
     i Integer i8 (64 bit)
     u Unsigned integer u8 (64 bit)
     f Floating point f8 (64 bit)
     c Complex floating point c16 (128 bit)
     O Object 0 (pointer to object)
     S, a String S24 (24 characters)
     U Unicode U24 (24 Unicode characters)
     V Other V12 (12-byte data block)


** Matplotlib
*** Format Strings
    A format string consists of a part for color, marker and line:

    fmt = '[marker][line][color]'
    Copy to clipboard
    Each of them is optional. If not provided, the value from the style cycle is used. Exception: If line is given, but no marker, the data will be a line without markers.

    Other combinations such as [color][marker][line] are also supported, but note that their parsing may be ambiguous.

**** Markers
     character	description
     '.'	    point marker
     ','	    pixel marker
     'o'	    circle marker
     'v'	    triangle_down marker
     '^'	    triangle_up marker
     '<'	    triangle_left marker
     '>'	    triangle_right marker
     '1'	    tri_down marker
     '2'	    tri_up marker
     '3'	    tri_left marker
     '4'	    tri_right marker
     's'	    square marker
     'p'	    pentagon marker
     '*'	    star marker
     'h'	    hexagon1 marker
     'H'	    hexagon2 marker
     '+'	    plus marker
     'x'	    x marker
     'D'	    diamond marker
     'd'	    thin_diamond marker
     '|'	    vline marker
     '_'	    hline marker

**** Line Styles
     character	description
     '-'	    solid line style
     '--'    dashed line style
     '-.'    dash-dot line style
     ':'	    dotted line style

     Example format strings:

     'b'    # blue markers with default shape
     'or'   # red circles
     '-g'   # green solid line
     '--'   # dashed line with default color
     '^k:'  # black triangle_up markers connected by a dotted line

**** Colors
     The supported color abbreviations are the single letter codes

     character	color
     'b'	blue
     'g'	green
     'r'	red
     'c'	cyan
     'm'	magenta
     'y'	yellow
     'k'	black
     'w'	white
     
     and the 'CN' colors that index into the default property cycle.
     If the color is the only part of the format string, you can additionally
     use any matplotlib.colors spec, e.g. full names ('green') or hex strings ('#008000').


** SQRT
*** Con Math
    import math

    math.sqrt( x )

*** Con Numpy
    np.sqrt(x)

* Create Strings
** With str function
   s_name = "med"
   age = 18
   ex1 = "my name is " + s_name + " and I am " + str(age) + " years old."

** With format method
   s_name = "med"
   age = 18
   ex2 = "my name is {0} and I am {1} years old.".format(s_name, age)

** With %
   s_name = "med"
   age = 18
   ex3 = "my name is %s and I am %i years old." %(s_name, age)
   
** With F Strings
   - puedo usar f o F
   - puedo usar comillas simples o dobles ' "
   - puedo operar dentro de las llaves {age + 2}
    
   s_name = "med"
   age = 18
   ex4 = f"my name is {s_name} and I am {age} years old."


   
** Links
   https://www.youtube.com/watch?v=0fq69_9iEqc
   
   https://www.youtube.com/watch?v=nghuHvKLhJA

* Algunos Archivos - Documentos que uso de referencia
  # C-c C-o para abrir links
  [[./pyqt_bkp.org][pyqt_bkp.org -- algo de pyqt]] 
  [[./python_qt_designer.org][python_qt_designer.org -- algo sobre el designer]]   


