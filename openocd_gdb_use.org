* ##### Como utilizar Openocd desde la linea de comandos CLI #####
  - funciona como proceso acepta conexiones telnet en el puerto 4444 y conexiones gdb en 3333
  - primero asignar permisos segun archivo openocd_conf.txt
    #en el sistema en /usr/local/share/openocd/

** Conectar placa y ejecutar
   openocd -f stm32f0discovery.cfg

** Abrir nueva consola y conectarse a openocd por telnet
   telnet localhost 4444

*** para grabar binario - con telnet -
    > reset halt
    > flash probe 0
    > stm32f1x mass_erase 0
    > flash write_bank 0 main.bin 0
    > reset run

*** para revisar memoria - con telnet -
    > reset halt
    > flash probe 0
    > flash list
    > flash info 0
    > stm32f1x options_read 0
    > flash write_bank 0 main.bin 0
    > reset run

*** si quiero ver algo de la flash
    > dump_image opti2.bin 0x1FFFF800 32

    $ hexdump -x opti2.bin

*** para cerrar sesion
    > exit
    CTRL + } o CTRL + ]
    > quit


** Para ver algo en el binario
   $ hexdump -x Template_F030_rom.bin -s 0xf400    //para ver esa posicion si existe en el bin
   $ hexdump -x Template_F030_rom.bin              //para ver todo la estructura del bin
   $ hexdump -x Template_F030_rom.bin -s 0xf400 -n 64   //para ver esa posicion 64 bytes


* DEBUG con GDB
  ###COMANDOS GDB
  #info desde http://openocd.org/doc/html/GDB-and-OpenOCD.html

** Conexion OpenOCD y GDB
   - ejecutar openocd en modo monitor y desde otra consola ejecutar para conectarse:

   arm-none-eabi-gdb --eval-command="target remote localhost:3333" Template_F050_rom.elf
   arm-none-eabi-gdb --eval-command="target remote localhost:3333" Template_F030_rom.elf

** Comandos a utilizar
   https://sourceware.org/gdb/onlinedocs/gdb/index.html#SEC_Contents

   monitor reset halt
   load			#carga el programa en memoria (graba flash)
   continue		#hace correr el programa
   CTRL+c		#corta el proceso
   where		#muestra la posicion pc-stack (igual a bt)
   stepi		#assembler + c code
   n		        #next, high level
   s		        #step, assembly level
   p variable	        #print variable value
   info program	        #si corre o se encuentra en break
   list 		#muestra partes del codigo alrededor del break
   l 1                  #muestra la primera parte del modulo
   l func
   mon reg       	#muestra registros ARM
   info frame           #program-counter stack-pointer local variables position
                        #me dice tambien que modulo se esta ejecutando
   u 112                #correr hasta la linea 112 de este contexto (modulo)
   fin finish           #corre hasta que retorna desde el sp y frena

** breakpoints
   break function
   break +offset
   break linenum
   break filename:linenum		#example: b src/GTK_Signal.c:2274
   break filename:function
   info break
   delete [breakpoints]	#borra breakpoints por numero

** tracepoints
   #para no frenar demasiado tiempo el programa, frena, colecta datos y sigue solo
   trace foo.c:121
   trace location if cond
   passcount 5 2    #cortar tracepoint 2 cuando pase 5 veces por ahi

** Imprimir registro o posicion de memoria
   p 0x40013800    //imprime el registro USART1->CR1
   p/x 0x4...     //resultado en hexa
   p/t 0x4...     //resultado en binario
   x 0x4...       #memoria de codigo en disassemby
                  # https://sourceware.org/gdb/onlinedocs/gdb/Memory.html

** ##error##
   ##No symbol table is loaded.  Use the "file" command.
   ##debo haber corrido el arm-none-eabi-gdb desde otro directorio
   (gdb) file Template_F030_rom.elf

** #### PARA SCRIPTS EN OPENOCD #####
   # OPENOCD puede recibir scripts y comandos mezclados, pero los comandos pueden generar errores en la ejecucion
   # cuando se pueda poner los comandos necesarios dentro de un script de config
   http://openocd.org/doc/html/Config-File-Guidelines.html#Config-File-Guidelines


* GDB con Emacs - GUD -
** si quiero usar otro programa en vez de gdb
   (setq gud-gdb-command-name "arm-none-eabi-gdb")
   hasta ahora no va, habra que probar mas
   https://github.com/SL-RU/stm32-emacs/blob/master/stm32.el

** todo a mano
   ir al directorio del archivo .elf
   M-x gdb
   (run like this) arm-none-eabi-gdb -i=mi
   (gdb) target remote localhost:3333
   (gdb) file Template_F030_rom.elf
   (gdb) 

* DEBUG con DDD
  $ddd --eval-command="target remote localhost:3333" --debugger arm-none-eabi-gdb Template_F030_rom.elf

* DEBUG con GDB tui
arm-none-eabi-gdb -tui --eval-command="target remote localhost:3333" iotogglem0_wspl.elf
#dar enter, comandos info desde https://fun-tech.se/stm32/OpenOCD/gdb.php
mon reg
info frame

** TUI MODE (upper window)
C-x 2 dos ventanas (c + assembler)
C-x 1 una ventana
C-x a entrar o salir del modo TUI
C-x o cambia el foco de la ventana activa

** comandos TUI desde ventana gdb
layout next	#Display the next layout.
layout prev	#Display the previous layout.
layout src	#Display the source window only.
layout asm	#Display the assembly window only.
layout split	#isplay the source and assembly window.
layout regs	#Display the register window together with the source or assembly window.
focus next | prev | src | asm | regs | split	#Set the focus to the named window.
refresh		#Refresh the screen. This is similar to using C-L key.
update		#Update the source window and the current execution point.
winheight name +count
winheight name -count	#Change the height of the window name by count lines. Positive counts 			
                        #increase the height, while negative counts decrease it.



* SOURCES INFO
https://fun-tech.se/stm32/OpenOCD/gdb.php
http://openocd.org/doc/html/GDB-and-OpenOCD.html
https://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_192.html#SEC197



