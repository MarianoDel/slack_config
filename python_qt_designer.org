* PROGRAMACION Qt for Python (PySide2) - Qt

  Qt tiene ahora una version para python -pyside2-, se puede bajar desde PyPi con pip3
  # pip3 install pyside2

** Usar Qt Designer para la parte grafica
*** Convertir archivo xml a python .py
   $ pyside2-uic mainWindow.ui > ui_mainWindow.py
   $ pyside2-rcc //para archivo resources

*** Levantar interface grafica desde la aplicacion
    en el archivo de aplicacion incluir cÃ³digo de ejemplo

import sys
from PySide.QtGui import *
from PySide.QtCore import *
from ui_mainWindow import Ui_mainWindow

class MainWindow(QMainWindow, Ui_mainWindow):
   def __init__(self):
       super(MainWindow, self).__init__()
       self.setupUi(self)
       self.assignWidgets()
       self.show()

   def assignWidgets(self):
       self.goButton.clicked.connect(self.goPushed)

   def goPushed(self):
       self.goText.append("Go, Go, Go!")

if __name__ == '__main__':
   app = QApplication(sys.argv)
   mainWin = MainWindow()
   ret = app.exec_()
   sys.exit( ret )

*** Levantar directamente el xml desde el script
 1 # main.py
 2 import sys
 3 from PySide2.QtUiTools import QUiLoader
 4 from PySide2.QtWidgets import QApplication
 5 from PySide2.QtCore import QFile
 6 
 7 if __name__ == "__main__":
 8     app = QApplication(sys.argv)
 9 
10     file = QFile("mainwindow.ui")
11     file.open(QFile.ReadOnly)
12 
13     loader = QUiLoader()
14     window = loader.load(file)
15     window.show()
16 
17     sys.exit(app.exec_())

** Signals and Slots
    https://wiki.qt.io/Qt_for_Python_Signals_and_Slots

* PROGRAMACION GUI CON QT5 y Python (PyQt5) - Riverbank

** Manual original y eventos de riverbank
http://pyqt.sourceforge.net/Docs/PyQt5/index.html
http://pyqt.sourceforge.net/Docs/PyQt4/qevent.html

** Con el archivo del Qt Designer archivo.ui lo paso a python
   pyuic5 archivo.ui > archivo.py

   #ahora tengo que armar el main.py y vincularlo a la parte grafica
   #Qt5 utiliza 3 clases bases de toda la interface GUI
   QWidgets
   QDialog
   QMainWindow

#segun el tipo de interface GUI que haya creado tengo una de esas tres clases bases

#puedo enganchar la GUI de tres formas
direct approach
single inheritance
multiple inheritance

*** ### DIRECT APPROACH ###
si el dialogo que arme se llama ImageDialog y la clase es QDialog
   puedo hacer cat o head image.ui...
   <class>ImageDialog</class>
   <widget class="QDialog" name="ImageDialog">
pyuic5 image.ui > ui_imagedialog.py

import sys
from PyQt5.QtWidgets import QApplication, QDialog
from ui_imagedialog import Ui_ImageDialog

app = QApplication(sys.argv)
window = QDialog()
ui = Ui_ImageDialog()
ui.setupUi(window)

window.show()
sys.exit(app.exec_())

#si no responde la interface por ahi pifie el nombre de las clases o la funcion de inicializacion
puedo revisarla con cat ui_imagedialog.py
   class Ui_ImageDialog(object):
      def setupUi(self, ImageDialog):

*** ### SINGLE INHERITANCE ### Este es el que usan casi todos
#con este metodo puedo tomar control de los widgets
import sys
from PyQt5.QtWidgets import QApplication, QDialog
from ui_imagedialog import Ui_ImageDialog

class ImageDialog(QDialog):
    def __init__(self):
        super(ImageDialog, self).__init__()

        # Set up the user interface from Designer.
        self.ui = Ui_ImageDialog()
        self.ui.setupUi(self)

        # # Make some local modifications.
        # self.ui.colorDepthCombo.addItem("2 colors (1 bit per pixel)")
        #
        # # Connect up the buttons.
        # self.ui.okButton.clicked.connect(self.accept)
        # self.ui.cancelButton.clicked.connect(self.reject)

app = QApplication(sys.argv)
w = ImageDialog()
w.show()
sys.exit(app.exec_())

*** ### MULTIPLE INHERITANCE ###
from PyQt5.QtGui import QDialog
from ui_imagedialog import Ui_ImageDialog

class ImageDialog(QDialog, Ui_ImageDialog):
    def __init__(self):
        super(ImageDialog, self).__init__()

        # Set up the user interface from Designer.
        self.setupUi(self)

        # Make some local modifications.
        self.colorDepthCombo.addItem("2 colors (1 bit per pixel)")

        # Connect up the buttons.
        self.okButton.clicked.connect(self.accept)
        self.cancelButton.clicked.connect(self.reject)

*** ### OTRO METODO ES UTILIZAR UIC DENTRO DEL CODIGO PYTHON ###
#https://www.youtube.com/watch?v=OpUeZzKcA7Q

import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import uic

#nueva clase que contiene la interface
class Ventana (QMainWindow):
      #metodo constructor
      def __init__(self):
      	  #inicio un objeto QMainWindow
	  QMainWindow.__init__(self)
	  #cargo el archivo de interface *.ui
	  uic.loadUi("MainWindow.ui",self)
	  self.setWindowTitle("Nuevo Nombre")

#instanciar aplicacion
app = QApplication(sys.argv)
#creo el objeto de la clase ventana
vent = Ventana()
#mostrar ventana
vent.show()
#ejecutar aplicacion
app.exec_()

** A FUTURO, VER pyqtdeploy
http://pyqt.sourceforge.net/Docs/pyqtdeploy/

** links:
http://pyqt.sourceforge.net/Docs/PyQt5/designer.html

http://pythonthusiast.pythonblogs.com/230_pythonthusiast/archive/1348_developing_cross_platform_application_using_qt_pyqt_and_pyside__introduction-part_1_of_5.html

https://www.python-course.eu/python3_course.php

http://zetcode.com/gui/pyqt5/eventssignals/

http://projects.skylogic.ca/blog/how-to-install-pyqt5-and-build-your-first-gui-in-python-3-4/

* PROGRAMACION GUI CON QT5 y Python (PyQt5)
** links:
   http://pyqt.sourceforge.net/Docs/PyQt5/designer.html
  
   http://pythonthusiast.pythonblogs.com/230_pythonthusiast/archive/1348_developing_cross_platform_application_using_qt_pyqt_and_pyside__introduction-part_1_of_5.html
   
   https://www.python-course.eu/python3_course.php
  
   http://zetcode.com/gui/pyqt5/eventssignals/

   http://projects.skylogic.ca/blog/how-to-install-pyqt5-and-build-your-first-gui-in-python-3-4/

** Manual original y eventos de Riverbank
   http://pyqt.sourceforge.net/Docs/PyQt5/index.html
   http://pyqt.sourceforge.net/Docs/PyQt4/qevent.html
   http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html

** Pasar de la GUI al archivo Python
*** con el archivo del Qt Designer archivo.ui lo paso a python
    pyuic5 archivo.ui > archivo.py
    pyrcc5 res_arch.qrc > res_arch_rc.py    #si tiene resources

*** ahora tengo que armar el main.py y vincularlo a la parte grafica
**** Qt5 utiliza 3 clases bases de toda la interface GUI
     - segun el tipo de interface GUI que haya creado tengo una de esas tres clases bases
     QWidgets
     QDialog
     QMainWindow

**** puedo enganchar la GUI de tres formas
     direct approach
     single inheritance
     multiple inheritance

**** ### DIRECT APPROACH ###
     si el dialogo que arme se llama ImageDialog y la clase es QDialog
     puedo hacer cat o head image.ui...
     <class>ImageDialog</class>
     <widget class="QDialog" name="ImageDialog">
     pyuic5 image.ui > ui_imagedialog.py

     import sys
     from PyQt5.QtWidgets import QApplication, QDialog
     from ui_imagedialog import Ui_ImageDialog

     app = QApplication(sys.argv)
     window = QDialog()
     ui = Ui_ImageDialog()
     ui.setupUi(window)

     window.show()
     sys.exit(app.exec_())

     #si no responde la interface por ahi pifie el nombre de las clases o la funcion de inicializacion
     puedo revisarla con cat ui_imagedialog.py
     class Ui_ImageDialog(object):
     def setupUi(self, ImageDialog):

**** ### SINGLE INHERITANCE ### Este es el que usan casi todos
     #con este metodo puedo tomar control de los widgets
     import sys
     from PyQt5.QtWidgets import QApplication, QDialog
     from ui_imagedialog import Ui_ImageDialog

     class ImageDialog(QDialog):
     def __init__(self):
     super(ImageDialog, self).__init__()

        # Set up the user interface from Designer.
        self.ui = Ui_ImageDialog()
        self.ui.setupUi(self)

        # # Make some local modifications.
        # self.ui.colorDepthCombo.addItem("2 colors (1 bit per pixel)")
        #
        # # Connect up the buttons.
        # self.ui.okButton.clicked.connect(self.accept)
        # self.ui.cancelButton.clicked.connect(self.reject)

        app = QApplication(sys.argv)
        w = ImageDialog()
        w.show()
        sys.exit(app.exec_())

**** ### MULTIPLE INHERITANCE ###
     from PyQt5.QtGui import QDialog
     from ui_imagedialog import Ui_ImageDialog
     
     class ImageDialog(QDialog, Ui_ImageDialog):
     def __init__(self):
     super(ImageDialog, self).__init__()

        # Set up the user interface from Designer.
        self.setupUi(self)

        # Make some local modifications.
        self.colorDepthCombo.addItem("2 colors (1 bit per pixel)")

        # Connect up the buttons.
        self.okButton.clicked.connect(self.accept)
        self.cancelButton.clicked.connect(self.reject)

**** ### OTRO METODO ES UTILIZAR UIC DENTRO DEL CODIGO PYTHON ###
     https://www.youtube.com/watch?v=OpUeZzKcA7Q

import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import uic

#nueva clase que contiene la interface
class Ventana (QMainWindow):
      #metodo constructor
      def __init__(self):
      	  #inicio un objeto QMainWindow
	  QMainWindow.__init__(self)
	  #cargo el archivo de interface *.ui
	  uic.loadUi("MainWindow.ui",self)
	  self.setWindowTitle("Nuevo Nombre")

#instanciar aplicacion
app = QApplication(sys.argv)
#creo el objeto de la clase ventana
vent = Ventana()
#mostrar ventana
vent.show()
#ejecutar aplicacion
app.exec_()

** #### A FUTURO, VER pyqtdeploy #####
   http://pyqt.sourceforge.net/Docs/pyqtdeploy/

* Todo referido a la parte grafica qt-css
https://www.youtube.com/watch?v=_sAGY_4Ptsw
min 12.30 agrega qframe
min 18.50 icons on buttons  (OJO QtoolButton y bo pushbutton)
min 21 Qbutton text under icon
min 22.25 qss para buttons (gradient background color)
min 28 css direccionado al widget QFrame
min 31 button checkeable
min 32 auto exclusive property
min 33 css para todos los botones
min 34 css para button checked
min 37 css para button pressed
min 38 css para hover y border 1px


#### ALGO DE QSLIDER
#el qslider lo modifique siguiendo este pagina
http://blog.qt.io/blog/2007/06/29/styling-qslider-qheaderview/

QSlider::groove:vertical {
    background: red;
    position: absolute; /* absolutely position 4px from the left and right of the widget. setting margins on the widget should work too... */
    left: 4px; right: 4px;
}

QSlider::handle:vertical {
    height: 10px;
    background: green;
    margin: 0 -4px; /* expand outside the groove */
}

QSlider::add-page:vertical {
    background: white;
}

QSlider::sub-page:vertical {
    background: pink;
}

#y un retoque fino con esta otra
http://thesmithfam.org/blog/2010/03/10/fancy-qslider-stylesheet/




https://stackoverflow.com/questions/38071131/how-to-adjust-a-qsliders-handle
agrandar el slider con css en c++

https://wiki.python.org/moin/PyQt
wiki de pyqt con info y ejemplos

https://wiki.python.org/moin/PyQt/Using_Python_Custom_Widgets_in_Qt_Designer

http://doc.qt.io/qt-5/stylesheet-examples.html


https://stackoverflow.com/questions/20952226/customize-qdial-with-stylesheet

http://acodigo.blogspot.com.ar/2016/10/pyqt-5-estilos-qss.html



https://stackoverflow.com/questions/35532459/smooth-drawing-with-qpainter

https://stackoverflow.com/questions/9465047/make-an-animated-wave-with-drawpolyline-in-pyside-pyqt

* Algo general de Python que aplica - The Zen of Python
** Lo que no este en este documento
   https://www.pythoncheatsheet.org

** Callbacks en python

   https://stackoverflow.com/questions/443885/python-callbacks-delegates-what-is-common

   https://stackoverflow.com/questions/4689984/implementing-a-callback-in-python-passing-a-callable-reference-to-the-current

* Algo de Python que no aplica directamente
** #Python for Finance & Python for Quants
   https://lectures.quantecon.org/py/learning_python.html

   https://www.quantstart.com/articles

   http://www.pythonforfinance.net

   http://tpq.io

** #Dynamics and Systems
   https://apmonitor.com/pdc/index.php/Main/ModelSimulation

** #Matplotlib
   http://www.labri.fr/perso/nrougier/teaching/matplotlib/#ipython-and-the-pylab-mode

* QPushButton no hiphen
** Para que no aparezca el hiphen en el nombre 
   - focus policy No Focus

* QPushButton checkeable
** Chekeable
   - si lo quiero autoexcluir lo hago desde el codigo con la funcion
   if (button.isChecked() == True):
       button.toggle()
   
* QPushButton still pressed
** no hay nuevos eventos si el boton sigue presionado
   - se puede disparar un timer y revisar si el boton sigue presionado
** utilizo las seniales pressed() released()
   - con esto conozco cuando lo apretaron y cuando lo soltaron

* QPushButton Image
** con imagenes en archivos resources
   - voy a las propiedades icon -> elijo icon desde resources
   - muevo el tamanio de la imagen con el tamanio del icono

* QPushButton Text
** setear el texto
   - con el metodo setText self.ui.pbutton.setText("Click here!")
** averiguar el texto
   - str_name = self.ui.pbutton.text()

* QPushButton change style sheet from code
  self.pushButton.setStyleSheet("background-color: red")

* QPushButton some styles
QPushButton {
color: #333;
border: 2px solid #555;    #o rgb(xx,xx,xx);
border-radius: 20px;
border-style: outset;
background: qradialgradient(
cx: 0.3, cy: -0.4, fx: 0.3, fy: -0.4,
radius: 1.35, stop: 0 #fff, stop: 1 #888
);
padding: 5px;
}

QPushButton:hover {
background: qradialgradient(
cx: 0.3, cy: -0.4, fx: 0.3, fy: -0.4,
radius: 1.35, stop: 0 #fff, stop: 1 #bbb
);
}

QPushButton:pressed {
border-style: inset;
background: qradialgradient(
cx: 0.4, cy: -0.1, fx: 0.4, fy: -0.1,
radius: 1.35, stop: 0 #fff, stop: 1 #ddd
);
}
* QPushButton button transparent
** Para no tener la forma del boton
   - uso stylesheet, en este caso fondo blanco
     background-color: rgb(255, 255, 255);
     border: 0px;
     color: rgb(55, 52, 53);
  
* QPushButton enable/disable
** Hay dos mÃ©todos
   setEnabled() and isEnabled()
   - si lo quiero desactivar
     Button.setEnable(False)
   - si lo quiero activar
     Button.setEnable(True)

* QPushButton raise
** Uso esta propiedad para que el widget aparezca arriba de otro
   self.ui.Button.raise_()

* Qlabel
** para obtener el texto
   - str1 = qlabel.text()
** para escribir texto
   - qlabel.setText(str1)

* QlineEdit
** Cambiar el color de la seleccion de texto
   - con StyleSheet, esta es la forma correcta si quiero mas efectos con el mismo pseudo-state
     los meto dentro de los parentesis
   QLineEdit:focus {
   background-color: rgb(170, 170, 255);
   }

** Para direccionar el widget a estilizar desde un StyleSheet de Dialog
   QLineEdit#minuteLineEdit:hover {background-color: rgb(170, 170, 255)};

** Si quiero cambiar en funcion de algun movimiento
   - uso pseudo-states
     https://doc.qt.io/qt-5/stylesheet-syntax.html

* Pasar de str a int, float
** pasar a int
   - new_int = int(str1)
   - new_float = float(str2)

* Eventos y Handlers
** Eventos
  Los eventos pueden ser generados por el propio programa, otra instancia u otro programa.
  Son recibidos por el main loop y despachados a los objetos.
  - event source    #es el objeto donde cambia el estado
  - event object    #es la instancia que encapsula el cambio del source "event"
  - event target    #es el objeto que desea ser notificado

*** pyQt5 Signals and Slots
    Una signal es emitida con el evento, un slot es llamado cuando esta conectado al evento.

    sld.valueChanged.connect(lcd.display)
    
    sld.valueChanged es el evento y la signal
    .connect conecta el evento con el slot (lcd.display)

*** Reimplementing event handler
    - Events in PyQt5 are processed often by reimplementing event handlers.
    - reimplemento el evento keyPressEvent() para cerrar aplicacion con tecla ESC

    def keyPressEvent(self, e):       
        if e.key() == Qt.Key_Escape:
            self.close()

    - reimplemento evento del mouse, con lo valores (x,y) los escribo en un textLabel
      def mouseMoveEvent(self, e):        
        x = e.x()
        y = e.y()
        
        text = "x: {0},  y: {1}".format(x, y)
        self.label.setText(text)

*** Event sender
    Sometimes it is convenient to know which widget is the sender of a signal. 
    For this, PyQt5 has the sender() method.

    #conecto event -> signal -> slot (buttonClicked)
    btn1.clicked.connect(self.buttonClicked)            
    btn2.clicked.connect(self.buttonClicked)

**** Si quiero conocer el nombre del objeto que llamo
    def buttonClicked(self):      
        sender = self.sender()
        if sender.objectName() == 'triangularButton':
            #do this

**** Texto de sender
    #con el metodo sender conozco quien me llamo, y en particular me quedo con el texto
    def buttonClicked(self):      
        sender = self.sender()
        self.statusBar().showMessage(sender.text() + ' was pressed')

** Signals
   - creo una clase que tieneun objeto signal
   - inicializo el objeto de la clase y conecto la signal al slot (self.close)
   - cuando presiono el mouse, capturo el evento y emito la nueva signal
   - la nueva signal al estar conectada a close cierra el programa
    
   
import sys
from PyQt5.QtCore import pyqtSignal, QObject
from PyQt5.QtWidgets import QMainWindow, QApplication

class Communicate(QObject):    
    closeApp = pyqtSignal() 
    
class Example(QMainWindow):    
    def __init__(self):
        super().__init__()        
        self.initUI()
                
    def initUI(self):      
        self.c = Communicate()
        self.c.closeApp.connect(self.close)               
        self.setGeometry(300, 300, 290, 150)
        self.setWindowTitle('Emit signal')
        self.show()
                
    def mousePressEvent(self, event):        
        self.c.closeApp.emit()
        
        
if __name__ == '__main__':    
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_()) 

   

** Lins
   http://zetcode.com/gui/pyqt5/eventssignals/
  
* Imagen de fondo solo en Dialog
** Cuando cambio el stylesheet background-image todos los widgets lo heredan
   Tengo que decir que es el background solo de ese widget
   QDialog {background-image: url(:/imag/resources/fondo_con_logo_1280x800.png)};  

* QtDesiger QtCreator
** First Layout
   https://www.youtube.com/watch?v=gWa2rqe8l6E&list=PLS1QulWo1RIZiBcTr5urECberTITj7gjA&index=7
   - poner cualquier widget, pushButton por ejemplo
   - click derecho en el MainWindow o Dialog
   - Layout-> Vertical
     con eso toma el layout principal y se lo asigna al Dialogo o MainWindow
     
** qt y css
   https://thesmithfam.org/blog/2009/09/10/qt-stylesheets-tutorial/

** Archivo resources
   - creo una carpeta dentro del proyecto resources y pongo los archivos que quiero, fotos, iconos, etc.

** Resources Browser -> Edit resources
   - segundo boton lado izquierdo New
   - elijo el nombre del nuevo archivo resources
   - agrego un nuevo prefix/path
   - le voy agregando los archivos de resources que quiera, fotos por ejemplo
     
** Los widgets no se muestran bien en el dialogo
*** la suma de la altura de los widgets es mayor a lo que me muestra creator
    - aumento la geometria del grafico desde 1024 x 768 a 1024 x 900
    - corrijo los widgets o agrego los espaciadores y vuelvo a mi geometria original

** Background Image con StyleSheet
*** Background del MainWindow
    Dialog { background-image: url(:/Images/background.png); }

    Como resource puedo hacer:
    1.- Agrego archivo resources -> agrego imagen
    2.- Edito css del Dialog -> Add resources -> elijo el resouce que quiero
        background-image: url(:/newPrefix/Inicio listo.jpg);

*** Background de algun Widget
    qApp->setStyleSheet("QWidget {background-image: url(./image.png) }");

    myWidget->setStyleSheet("background-image: url(./image.png)")

** Importante en Rpi3
   para pantalla completa hacer coincidir la resolucion de pantalla
   $ raspi-config
   con el tamanio de la foto en backround-image

* Dialog call another Dialog
** Link riverbank
   https://www.riverbankcomputing.com/static/Docs/PyQt4/qdialog.html

** En Dialog_01/02 poner algun boton que llame a la funcion

*** Dialog_02 class write the following method: 
def callAnotherQMainWindow(self)
    self.close()
    self.dialog_01 = Dialog_01()
    self.dialog_01.show()
    self.dialog_01.raise_()

*** Dialog_01 class write this method:
def callAnotherQMainWindow(self)
    self.close()
    self.dialog_02 = Dialog_02()
    self.dialog_02.show()
    self.dialog_02.raise_()

** Si el nuevo Dialogo es modal (no retorna control hasta que termine)
   lo muestro con .exec_()

** Si el nuevo Dialogo es no-modal (retorna el control)
   lo muestro con .show()
   y el control vuelve a la ventana principal, la que llamo al dialogo

* Python General
** Link
   https://pythoncheatsheet.org

** String Formatting C-Style
   Python uses C-style string formatting to create new, formatted strings. The "%" operator
   is used to format a set of variables enclosed in a "tuple" (a fixed size list), together
   with a format string, which contains normal text together with "argument specifiers", 
   special symbols like "%s" and "%d".

   Let's say you have a variable called "name" with your user name in it, and you would then
   like to print(out a greeting to that user.)

*** String Simple
    name = MED
    print("Hello , %s!" % name)

*** String Multiple
    name = "John"
    age = 34
    print("%s is %d years old." % (name, age))

    Any object which is not a string can be formatted using the %s operator as well.
    The string which returns from the "repr" method of that object is formatted as the string.
    For example:

    mylist= [1, 2, 3]
    print("mi nueva lista: %s" % mylist)

*** Formatos especiales
    For example, '%03.2f'

*** Here are some basic argument specifiers you should know:

    %s - String (or any object with a string representation, like numbers)

    %d - Integers

    %f - Floating point numbers

    %.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot.

    %x/%X - Integers in hex representation (lowercase/uppercase)

** String Formatting New Style str.format

   name = 'John'
   age = 20'
   print("Hello I'm {}, my age is {}".format(name, age))

*** Formatos especiales
    https://docs.python.org/3/library/string.html
    replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"
    {:d} 

**** Integer
    The available integer presentation types are:

    Type	Meaning
    'b'	Binary format. Outputs the number in base 2.
    'c'	Character. Converts the integer to the corresponding unicode character before printing.
    'd'	Decimal Integer. Outputs the number in base 10.
    'o'	Octal format. Outputs the number in base 8.
    'x'	Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.
    'X'	Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9.
    'n'	Number. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters.
    None	The same as 'd'.

**** Floating
     The available presentation types for floating point and decimal values are:

     Type	Meaning
     'e'	Exponent notation. Prints the number in scientific notation using the letter âeâ to indicate the exponent. The default precision is 6.
     'E'	Exponent notation. Same as 'e' except it uses an upper case âEâ as the separator character.
     'f'	Fixed-point notation. Displays the number as a fixed-point number. The default precision is 6.
     'F'	Fixed-point notation. Same as 'f', but converts nan to NAN and inf to INF.
     'g'	

     General format. For a given precision p >= 1, this rounds the number to p significant digits and then
     formats the result in either fixed-point format or in scientific notation, depending on its magnitude.

     The precise rules are as follows: suppose that the result formatted with presentation type 'e' and
     precision p-1 would have exponent exp. Then if -4 <= exp < p, the number is formatted with presentation
     type 'f' and precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and
     precision p-1. In both cases insignificant trailing zeros are removed from the significand, and
     the decimal point is also removed if there are no remaining digits following it.

     Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf,
     0, -0 and nan respectively, regardless of the precision.

     A precision of 0 is treated as equivalent to a precision of 1. The default precision is 6.

     'G'	General format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too.
     'n'	Number. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters.
     '%'	Percentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign.
     None	Similar to 'g', except that fixed-point notation, when used, has at least one digit past the decimal point. The default precision is as high as needed to represent the particular value. The overall effect is to match the output of str() as altered by the other format modifiers.


    For example, '%03.2f' can be translated to '{:03.2f}'
   
** format Built-in Method
   # integer
   print(format(123, "d"))
   
   # float arguments
   print(format(123.4567898, "f"))
   
   # binary format
   print(format(12, "b"))

** hex Built-in Method
   number = 435
   print(number, 'in hex =', hex(number))

** Formatted String Literals or f-strings
   name = 'Elizabeth'
   f'Hello {name}!'
   'Hello Elizabeth!

   - It is even possible to do inline arithmetic with it:
   >>> a = 5
   >>> b = 10
   >>> f'Five plus ten is {a + b} and not {2 * (a + b)}.'
   'Five plus ten is 15 and not 30.'

** ToLower()
   str(sender.text()).lower()

** Int to String with formatting
   For someone who wants to convert int to string in specific digits, the below method is recommended.

   month = "{0:04d}".format(localtime[1])

   For Python 3.6+ the same behavior can be achieved with f-strings:
   
   print(f"{1:02d}")
